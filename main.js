(()=>{"use strict";var e,t=new Uint8Array(16);function n(){if(!e&&!(e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return e(t)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,i=function(e){return"string"==typeof e&&a.test(e)};for(var r=[],o=0;o<256;++o)r.push((o+256).toString(16).substr(1));const s=function(e,t,a){var o=(e=e||{}).random||(e.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,t){a=a||0;for(var s=0;s<16;++s)t[a+s]=o[s];return t}return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]).toLowerCase();if(!i(n))throw TypeError("Stringified UUID is invalid");return n}(o)};function c(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function d(e){c(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"==typeof e&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function l(e){c(1,arguments);var t=d(e);return!isNaN(t)}var u={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function m(e){return function(t){var n=t||{},a=n.width?String(n.width):e.defaultWidth;return e.formats[a]||e.formats[e.defaultWidth]}}var h,p={date:m({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:m({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:m({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},f={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function g(e){return function(t,n){var a,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&e.formattingValues){var r=e.defaultFormattingWidth||e.defaultWidth,o=i.width?String(i.width):r;a=e.formattingValues[o]||e.formattingValues[r]}else{var s=e.defaultWidth,c=i.width?String(i.width):e.defaultWidth;a=e.values[c]||e.values[s]}return a[e.argumentCallback?e.argumentCallback(t):t]}}function v(e){return function(t,n){var a=String(t),i=n||{},r=i.width,o=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],s=a.match(o);if(!s)return null;var c,d=s[0],l=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(l)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(d))return n}(l):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(d))return n}(l),c=e.valueCallback?e.valueCallback(c):c,{value:c=i.valueCallback?i.valueCallback(c):c,rest:a.slice(d.length)}}}const y={code:"en-US",formatDistance:function(e,t,n){var a;return n=n||{},a="string"==typeof u[e]?u[e]:1===t?u[e].one:u[e].other.replace("{{count}}",t),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:p,formatRelative:function(e,t,n,a){return f[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:g({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:g({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return Number(e)-1}}),month:g({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:g({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:g({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(h={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e,t){var n=String(e),a=t||{},i=n.match(h.matchPattern);if(!i)return null;var r=i[0],o=n.match(h.parsePattern);if(!o)return null;var s=h.valueCallback?h.valueCallback(o[0]):o[0];return{value:s=a.valueCallback?a.valueCallback(s):s,rest:n.slice(r.length)}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function b(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function w(e,t){c(2,arguments);var n=d(e).getTime(),a=b(t);return new Date(n+a)}function E(e,t){c(2,arguments);var n=b(t);return w(e,-n)}function x(e,t){for(var n=e<0?"-":"",a=Math.abs(e).toString();a.length<t;)a="0"+a;return n+a}const L=function(e,t){var n=e.getUTCFullYear(),a=n>0?n:1-n;return x("yy"===t?a%100:a,t.length)},C=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):x(n+1,2)},T=function(e,t){return x(e.getUTCDate(),t.length)},D=function(e,t){return x(e.getUTCHours()%12||12,t.length)},k=function(e,t){return x(e.getUTCHours(),t.length)},S=function(e,t){return x(e.getUTCMinutes(),t.length)},P=function(e,t){return x(e.getUTCSeconds(),t.length)},M=function(e,t){var n=t.length,a=e.getUTCMilliseconds();return x(Math.floor(a*Math.pow(10,n-3)),t.length)};var j=864e5;function A(e){c(1,arguments);var t=1,n=d(e),a=n.getUTCDay(),i=(a<t?7:0)+a-t;return n.setUTCDate(n.getUTCDate()-i),n.setUTCHours(0,0,0,0),n}function N(e){c(1,arguments);var t=d(e),n=t.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=A(a),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var o=A(r);return t.getTime()>=i.getTime()?n+1:t.getTime()>=o.getTime()?n:n-1}function O(e){c(1,arguments);var t=N(e),n=new Date(0);n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0);var a=A(n);return a}var U=6048e5;function I(e,t){c(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.weekStartsOn,r=null==i?0:b(i),o=null==n.weekStartsOn?r:b(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=d(e),l=s.getUTCDay(),u=(l<o?7:0)+l-o;return s.setUTCDate(s.getUTCDate()-u),s.setUTCHours(0,0,0,0),s}function W(e,t){c(1,arguments);var n=d(e,t),a=n.getUTCFullYear(),i=t||{},r=i.locale,o=r&&r.options&&r.options.firstWeekContainsDate,s=null==o?1:b(o),l=null==i.firstWeekContainsDate?s:b(i.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(a+1,0,l),u.setUTCHours(0,0,0,0);var m=I(u,t),h=new Date(0);h.setUTCFullYear(a,0,l),h.setUTCHours(0,0,0,0);var p=I(h,t);return n.getTime()>=m.getTime()?a+1:n.getTime()>=p.getTime()?a:a-1}function B(e,t){c(1,arguments);var n=t||{},a=n.locale,i=a&&a.options&&a.options.firstWeekContainsDate,r=null==i?1:b(i),o=null==n.firstWeekContainsDate?r:b(n.firstWeekContainsDate),s=W(e,t),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var l=I(d,t);return l}var Y=6048e5;function q(e,t){var n=e>0?"-":"+",a=Math.abs(e),i=Math.floor(a/60),r=a%60;if(0===r)return n+String(i);var o=t||"";return n+String(i)+o+x(r,2)}function H(e,t){return e%60==0?(e>0?"-":"+")+x(Math.abs(e)/60,2):z(e,t)}function z(e,t){var n=t||"",a=e>0?"-":"+",i=Math.abs(e);return a+x(Math.floor(i/60),2)+n+x(i%60,2)}const J={G:function(e,t,n){var a=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});case"GGGG":default:return n.era(a,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var a=e.getUTCFullYear(),i=a>0?a:1-a;return n.ordinalNumber(i,{unit:"year"})}return L(e,t)},Y:function(e,t,n,a){var i=W(e,a),r=i>0?i:1-i;return"YY"===t?x(r%100,2):"Yo"===t?n.ordinalNumber(r,{unit:"year"}):x(r,t.length)},R:function(e,t){return x(N(e),t.length)},u:function(e,t){return x(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(a);case"QQ":return x(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(e,t,n){var a=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(a);case"qq":return x(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(e,t,n){var a=e.getUTCMonth();switch(t){case"M":case"MM":return C(e,t);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(e,t,n){var a=e.getUTCMonth();switch(t){case"L":return String(a+1);case"LL":return x(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(e,t,n,a){var i=function(e,t){c(1,arguments);var n=d(e),a=I(n,t).getTime()-B(n,t).getTime();return Math.round(a/Y)+1}(e,a);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):x(i,t.length)},I:function(e,t,n){var a=function(e){c(1,arguments);var t=d(e),n=A(t).getTime()-O(t).getTime();return Math.round(n/U)+1}(e);return"Io"===t?n.ordinalNumber(a,{unit:"week"}):x(a,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):T(e,t)},D:function(e,t,n){var a=function(e){c(1,arguments);var t=d(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var a=t.getTime(),i=n-a;return Math.floor(i/j)+1}(e);return"Do"===t?n.ordinalNumber(a,{unit:"dayOfYear"}):x(a,t.length)},E:function(e,t,n){var a=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});case"EEEE":default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"e":return String(r);case"ee":return x(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});case"eeee":default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,a){var i=e.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(t){case"c":return String(r);case"cc":return x(r,t.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});case"cccc":default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){var a=e.getUTCDay(),i=0===a?7:a;switch(t){case"i":return String(i);case"ii":return x(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});case"iiii":default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(e,t,n){var a=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(e,t,n){var a,i=e.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",t){case"b":case"bb":case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(e,t,n){var a,i=e.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var a=e.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return D(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):k(e,t)},K:function(e,t,n){var a=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(a,{unit:"hour"}):x(a,t.length)},k:function(e,t,n){var a=e.getUTCHours();return 0===a&&(a=24),"ko"===t?n.ordinalNumber(a,{unit:"hour"}):x(a,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):S(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):P(e,t)},S:function(e,t){return M(e,t)},X:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();if(0===i)return"Z";switch(t){case"X":return H(i);case"XXXX":case"XX":return z(i);case"XXXXX":case"XXX":default:return z(i,":")}},x:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"x":return H(i);case"xxxx":case"xx":return z(i);case"xxxxx":case"xxx":default:return z(i,":")}},O:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+q(i,":");case"OOOO":default:return"GMT"+z(i,":")}},z:function(e,t,n,a){var i=(a._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+q(i,":");case"zzzz":default:return"GMT"+z(i,":")}},t:function(e,t,n,a){var i=a._originalDate||e;return x(Math.floor(i.getTime()/1e3),t.length)},T:function(e,t,n,a){return x((a._originalDate||e).getTime(),t.length)}};function F(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function X(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const Q={p:X,P:function(e,t){var n,a=e.match(/(P+)(p+)?/),i=a[1],r=a[2];if(!r)return F(e,t);switch(i){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;case"PPPP":default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",F(i,t)).replace("{{time}}",X(r,t))}};var G=6e4;function R(e){return e.getTime()%G}function $(e){var t=new Date(e.getTime()),n=Math.ceil(t.getTimezoneOffset());t.setSeconds(0,0);var a=n>0?(G+R(t))%G:R(t);return n*G+a}var V=["D","DD"],_=["YY","YYYY"];function K(e){return-1!==V.indexOf(e)}function Z(e){return-1!==_.indexOf(e)}function ee(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var te=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ne=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ae=/^'([^]*?)'?$/,ie=/''/g,re=/[a-zA-Z]/;function oe(e,t,n){c(2,arguments);var a=String(t),i=n||{},r=i.locale||y,o=r.options&&r.options.firstWeekContainsDate,s=null==o?1:b(o),u=null==i.firstWeekContainsDate?s:b(i.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=r.options&&r.options.weekStartsOn,h=null==m?0:b(m),p=null==i.weekStartsOn?h:b(i.weekStartsOn);if(!(p>=0&&p<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!r.localize)throw new RangeError("locale must contain localize property");if(!r.formatLong)throw new RangeError("locale must contain formatLong property");var f=d(e);if(!l(f))throw new RangeError("Invalid time value");var g=$(f),v=E(f,g),w={firstWeekContainsDate:u,weekStartsOn:p,locale:r,_originalDate:f},x=a.match(ne).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,Q[t])(e,r.formatLong,w):e})).join("").match(te).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return se(n);var o=J[a];if(o)return!i.useAdditionalWeekYearTokens&&Z(n)&&ee(n,t,e),!i.useAdditionalDayOfYearTokens&&K(n)&&ee(n,t,e),o(v,n,r.localize,w);if(a.match(re))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("");return x}function se(e){return e.match(ae)[1].replace(ie,"'")}const ce=(e,t,n,a,i,r="",o=[])=>({id:e,title:t,description:n,dueDate:a,startDate:oe(new Date,"yyyy-MM-dd"),priority:i,notes:r,checkList:o}),de=(e,t,n,a=[])=>({id:e,title:t,description:n,toDo:a}),le=(e,t,n=!1)=>({id:e,title:t,status:n,statusToggle:()=>{(void 0).status?(void 0).status=!1:(void 0).status=!0}}),ue=e=>{const t=JSON.parse(localStorage.getItem("Projects"));for(let n=0;n<t.length;n+=1)t[n].id===e.id&&(t[n]=e);localStorage.setItem("Projects",JSON.stringify(t))},me=(e,t=!1)=>{const n=JSON.parse(localStorage.getItem("Projects"));for(let a=0;a<n.length;a+=1)if(n[a].id===e.id)return t?a:n[a];return-1},he=e=>{const t=[];return Object.entries(e).forEach((n=>{const a=n[1],i=n[0];if(e.hasOwnProperty(i))if("checkList"===i){const n=document.createElement("div");n.classList.add("center","is-flex","is-flex-direction-column"),n.append(...((e,t)=>{let n;const a=[];let i,r;const o=JSON.parse(localStorage.getItem("actual-project"));return Object.entries(t).forEach((t=>{const s=t[1];n=document.createElement("div"),i=document.createElement("input"),r=document.createElement("label"),i.checked=s.status,i.setAttribute("type","checkbox"),i.setAttribute("id",s.id),i.classList.add("mx-3"),i.dataset.checklist=s.id,i.dataset.toDo=e.id,r.textContent=s.title,r.append(i),n.append(r),i.addEventListener("click",(e=>{e=e.target;for(let t=0;t<o.toDo.length;t+=1)if(o.toDo[t].id===e.dataset.toDo){const n=o.toDo[t];for(let t=0;t<n.checkList.length;t+=1)if(n.checkList[t].id===e.id){let e=n.checkList[t];e=n.checkList[t],e.status=!e.status,ue(o)}}})),a.push(n)})),a})(e,a)),t.push(n)}else if("dueDate"===i){const n=document.createElement("span"),a=(new Date(e.startDate).getTime()-new Date(e.dueDate).getTime())/864e5;a<0?(n.innerText=`You have ${Math.abs(a)} days to finish this project!`,n.style.position="absolute",n.style.top="10px",n.style.right="10px"):(n.innerText="This project was supposed to be already done!",n.style.position="absolute",n.style.top="10px",n.style.right="10px"),t.push(n)}else if("title"!==i&&"id"!==i&&"description"!==i&&"startDate"!==i){const e=document.createElement("p");e.className+=`${(e=>e.split("s+(?=[A-Z])").join("-").toLowerCase())(i)}`,e.textContent=a,t.push(e)}})),t},pe=e=>{document.getElementById(e.id).remove()},fe=e=>{for(;e.lastChild;)e.removeChild(e.lastChild)},ge=(e,t,n=!1)=>{e=me(e);for(let a=0;a<e.toDo.length;a+=1)if(e.toDo[a].id===t.id)return n?a:e.toDo[a];return-1},ve=e=>{document.getElementById(e.id).remove()},ye=e=>{const t=document.createElement("input");t.placeholder="Title for the Check-ToDo.",t.classList.add("input","is-small","is-primary","input-form");const n=document.createElement("label");n.classList.add("label","is-small","is-primary","my-4");const a=document.createElement("div");a.classList.add("is-flex","center");const i=document.createElement("span"),r=s();a.id=r,i.style.cursor="pointer",i.classList.add("delete","mt-4","ml-3"),i.classList.toggle="close",i.innerHTML="&times;",t.setAttribute("type","text"),n.textContent="Add a CheckList",n.append(t),a.append(n,i),e.append(a),i.addEventListener("click",(()=>{document.getElementById(a.id).remove()}))},be=e=>{let t=document.getElementById("main-form");const n=document.getElementById("main-div");let a=document.getElementById("to-do-holder");e&&(t=document.createElement("div"),t.id="main-form",a=document.createElement("div"),a.id="to-do-holder"),a.style.position="relative",a.id="to-do-holder";const i=document.createElement("div");i.style.backgroundColor="skyblue",i.id=s(),i.classList.add("box"),i.style.position="relative";const r=s(),o=document.createElement("input");o.setAttribute("required",!0),o.placeholder="Add a title for something you need ToDo in this project.",o.classList.add("input","is-small","is-info","input-form");const c=document.createElement("label");c.classList.add("label","is-small"),o.setAttribute("type","text"),c.textContent="ToDo Title",c.appendChild(o);const d=document.createElement("textarea");d.placeholder="Add the description of this ToDo.",d.classList.add("textarea","is-small","is-info","input-form"),d.rows="5";const l=document.createElement("label");l.classList.add("label","is-small"),d.setAttribute("type","text"),l.textContent="ToDo Description",l.appendChild(d);const u=document.createElement("input");u.classList.add("mx-2","is-small");const m=document.createElement("label");m.classList.add("is-small","is-info","label","input-form"),u.setAttribute("type","date"),m.textContent="ToDo Due Date",m.appendChild(u);const h=document.createElement("input");h.classList.add("ml-1");const p=document.createElement("label");p.classList.add("is-small","label"),h.setAttribute("type","radio"),h.setAttribute("value","high"),h.setAttribute("name",`${r}`),p.textContent="High",p.appendChild(h);const f=document.createElement("input");f.classList.add("ml-1");const g=document.createElement("label");g.classList.add("is-small","label"),f.setAttribute("type","radio"),f.setAttribute("value","medium"),f.setAttribute("name",`${r}`),g.textContent="Medium",g.appendChild(f);const v=document.createElement("input");v.classList.add("ml-1");const y=document.createElement("label");y.classList.add("is-small","label"),v.setAttribute("type","radio"),v.setAttribute("value","low"),v.setAttribute("name",`${r}`),y.textContent="Low",y.appendChild(v);const b=document.createElement("div");b.classList.toggle("radio-holder"),b.classList.add("py-2");const w=document.createElement("p");w.classList.add("is-small","label"),w.textContent="Pick your ToDo level of priority";const E=document.createElement("div");E.append(p,g,y),b.append(w,E);const x=document.createElement("textarea");x.placeholder="Here you can add some notes for the ToDo.",x.classList.add("textarea","is-small","is-info","input-form"),x.row="5";const L=document.createElement("label");L.textContent="Notes",L.classList.add("label","is-small","is-info"),L.append(x);const C=document.createElement("div"),T=document.createElement("input");T.classList.add("is-link","button"),T.type="submit",T.value="Add Check-ToDo (List of things you need to accomplish to finish the ToDo).",T.addEventListener("click",(()=>{ye(C)}));const D=document.createElement("span");if(D.style.position="absolute",D.style.top="10px",D.style.right="10px",D.classList.add("delete"),D.style.cursor="pointer",D.classList.toggle="close",D.innerHTML="&times;",i.append(c,l,m,b,L,D,T,C),a.append(i),t.append(a),e){n.append(a);const t=document.createElement("div");t.classList.add("is-flex","is-justify-content-center","mt-3");const r=document.createElement("input");r.type="submit",r.value="Add New ToDo",r.classList.add("button","is-success","my-2"),r.addEventListener("click",(()=>{Ce(e)})),t.append(r),i.append(t)}D.addEventListener("click",(()=>{pe(i)}))},we=e=>{const t=document.getElementById("main-div");fe(t);const n=document.createElement("div"),a=document.createElement("input"),i=document.createElement("div");i.classList.toggle("formProject"),t.classList.add("is-flex","is-flex-direction-column","column","is-9"),n.id="main-form";const r=document.createElement("div");r.style.position="relative",r.id="to-do-holder",r.classList.add("my-2"),a.type="submit",a.value="Save Project",a.classList.add("button","is-success","is-align-self-center");const o=document.createElement("div"),c=document.createElement("input");c.classList.add("input","input-form"),c.value=e.title,c.placeholder="Add a title for your new project.";const d=document.createElement("label");d.classList.add("label"),c.setAttribute("type","text"),c.id="pTitle",d.textContent="Title",d.appendChild(c);const l=document.createElement("textarea");l.placeholder="Add a description of your new project.",l.rows="5",l.classList.add("textarea","input-form"),l.value=e.description;const u=document.createElement("label");u.classList.add("label"),l.setAttribute("type","text"),l.id="pDescription",u.textContent="Description",u.appendChild(l);const m=document.createElement("h2");m.textContent="Project Info";const h=document.createElement("input");h.type="submit",h.value="Add New ToDo",h.classList.add("button","is-link","is-light","is-outlined","my-4"),e.toDo.forEach((e=>{r.style.position="relative",r.id="to-do-holder";const t=document.createElement("div");t.style.backgroundColor="skyblue",t.id=e.id,t.classList.add("box"),t.style.position="relative";const a=s(),i=document.createElement("input");i.setAttribute("required",!0),i.placeholder="Add a title for something you need ToDo in this project.",i.classList.add("input","is-small","is-info","input-form"),i.value=e.title;const o=document.createElement("label");o.classList.add("label","is-small"),i.setAttribute("type","text"),o.textContent="ToDo Title",o.appendChild(i);const c=document.createElement("textarea");c.placeholder="Add the description of this ToDo.",c.classList.add("textarea","is-small","is-info","input-form"),c.value=e.description,c.rows="5";const d=document.createElement("label");d.classList.add("label","is-small"),c.setAttribute("type","text"),d.textContent="ToDo Description",d.appendChild(c);const l=document.createElement("input");l.classList.add("mx-2","is-small");const u=document.createElement("label");u.classList.add("is-small","is-info","label","input-form"),l.setAttribute("type","date"),l.value=`${e.dueDate.split("-").reverse().join("-")}`,u.textContent="ToDo Due Date",u.appendChild(l);const m=document.createElement("input");m.classList.add("ml-1");const h=document.createElement("label");h.classList.add("is-small","label"),m.setAttribute("type","radio"),m.setAttribute("value","high"),m.setAttribute("name",`${a}`),h.textContent="High",h.appendChild(m);const p=document.createElement("input");p.classList.add("ml-1");const f=document.createElement("label");f.classList.add("is-small","label"),p.setAttribute("type","radio"),p.setAttribute("value","medium"),p.setAttribute("name",`${a}`),f.textContent="Medium",f.appendChild(p);const g=document.createElement("input");g.classList.add("ml-1");const v=document.createElement("label");v.classList.add("is-small","label"),g.setAttribute("type","radio"),g.setAttribute("value","low"),g.setAttribute("name",`${a}`),v.textContent="Low",v.appendChild(g);const y=document.createElement("div");y.classList.toggle("radio-holder"),y.classList.add("py-2");const b=document.createElement("p");b.classList.add("is-small","label"),b.textContent="Pick your ToDo level of priority";const w=document.createElement("div");"high"===e.priority?m.checked=!0:"medium"===e.priority?p.checked=!0:g.checked=!0,w.append(h,f,v),y.append(b,w);const E=document.createElement("textarea");E.placeholder="Here you can add some notes for the ToDo.",E.classList.add("textarea","is-small","is-info","input-form"),E.row="5",E.value=e.notes;const x=document.createElement("label");x.textContent="Notes",x.classList.add("label","is-small","is-info"),x.append(E);const L=document.createElement("div"),C=document.createElement("input");C.classList.add("is-link","button"),C.type="submit",C.value="Add Check-ToDo (List of things you need to accomplish to finish the ToDo).";try{e.checkList.forEach((e=>{const t=document.createElement("input");t.placeholder="Title for the Check-ToDo.",t.classList.add("input","is-small","is-primary","input-form");const n=document.createElement("label");n.classList.add("label","is-small","is-primary","my-4");const a=document.createElement("div");a.classList.add("is-flex","center");const i=document.createElement("span"),r=e.id;a.id=r,i.style.cursor="pointer",i.classList.add("delete","mt-4","ml-3"),i.classList.toggle="close",i.innerHTML="&times;",t.setAttribute("type","text"),t.value=e.title,n.textContent="Add a CheckList",n.append(t),a.append(n,i),L.append(a),i.addEventListener("click",(()=>{document.getElementById(a.id).remove()}))}))}catch(e){return[]}C.addEventListener("click",(()=>{ye(L)}));const T=document.createElement("span");T.style.position="absolute",T.style.top="10px",T.style.right="10px",T.classList.add("delete"),T.style.cursor="pointer",T.classList.toggle="close",T.innerHTML="&times;",t.append(o,d,u,y,x,T,C,L),r.append(t),n.append(r),T.addEventListener("click",(()=>{pe(t)}))})),h.addEventListener("click",(()=>{be(!1)})),i.append(m),o.append(m,d,u,r),n.append(o);const p=document.createElement("div");p.append(h,a),p.classList.add("is-flex","is-justify-content-space-between"),t.append(n,p),a.addEventListener("click",(()=>{Ce()}))},Ee=()=>{const e=document.createElement("div");e.id="index-holder";const t=JSON.parse(localStorage.getItem("Projects")),n=document.getElementById("main-div");for(let a=0;a<t.length;a+=1){const i=document.createElement("a");i.classList.add("box","m-5","p-5","notification","is-info"),i.id=t[a].id,i.textContent=t[a].title,i.addEventListener("click",(()=>{fe(n),xe(t[a])})),e.append(i)}fe(n),n.append(e)},xe=e=>{const t=document.getElementById("main-div");t.classList.add("column");const n=document.createElement("h2"),a=document.createElement("p"),i=document.createElement("input");i.type="submit",i.classList="button is-danger my-4 mx-2",i.value="Delete Project",i.addEventListener("click",(()=>{ve(me(e));const n=me(e,!0),a=JSON.parse(localStorage.getItem("Projects"));a.splice(n,1),localStorage.setItem("Projects",JSON.stringify(a)),fe(t),Ee()}));const r=document.createElement("input");r.type="submit",r.classList="button is-warning my-4 mx-2",r.value="Edit Project",r.addEventListener("click",(()=>{ve(me(e));const n=me(e,!0),a=JSON.parse(localStorage.getItem("Projects"));a.splice(n,1),localStorage.setItem("Projects",JSON.stringify(a)),fe(t),we(e)}));let o=[];localStorage.setItem("actual-project",JSON.stringify(e)),n.textContent=`Project title: ${e.title}`,a.textContent=`Description: ${e.description}`;const c=document.createElement("div"),d=document.createElement("h4");d.textContent="Checklists",c.appendChild(d),c.classList.add("do-detail");const l=document.createElement("h3");l.textContent="To Do list";const u=document.createElement("div"),m=document.createElement("input");m.type="submit",m.value="Add New ToDo",m.classList.add("button","is-link","my-4"),m.addEventListener("click",(()=>{be(e)})),t.append(n,a),u.append(l),e.toDo.forEach((t=>{const n=document.createElement("div");n.classList.add("notification","box","mr-2","is-warning","mt-2"),n.style.position="relative",n.setAttribute("id",t.id);const a=document.createElement("input");a.dataset.id=t.id,a.style.float="right",a.style.zIndex="2",a.value="Delete ToDo",a.classList.add("button","is-danger","mr-2"),a.addEventListener("click",(n=>{const a=n=n.target;a.id=n.dataset.id;const i=ge(e,a,!0);e.toDo.splice(i,1),ue(e),pe(document.getElementById(t.id))}));const i=document.createElement("p"),r=document.createElement("p");r.style.fontWeight=600,r.textContent=t.title,i.textContent=t.description,r.dataset.object="title",r.dataset.project=e.id,r.dataset.id=t.id,r.id=s(),i.dataset.id=t.id,i.dataset.project=e.id,i.dataset.object="description",i.id=s(),r.addEventListener("dblclick",(e=>{e=e.target,we(e)})),i.addEventListener("dblclick",(e=>{e=e.target,we(e)}));const d=document.createElement("i");d.classList="arrow",r.style.display="inline",n.appendChild(a),n.append(r,d),n.appendChild(i),d.addEventListener("click",(()=>{if(d.classList.toggle("up"),t=ge(e,t),o=he(t),n.children.length<5&&c.children.length<3)c.append(...o),c.classList.add("notification"),function(e){for(let t=0;t<e.children.length;t+=1)if(e.children[t].classList.contains("priority")){const n=e.children[t].innerText;e.children[t].innerText=`Priority: ${n}`}else e.children[t].classList.contains("notes")&&e.children[t].classList.add("center")}(c),function(e){e.innerText.includes("high")?e.classList.add("is-danger","box"):e.innerText.includes("medium")?e.classList.add("is-warning","box"):e.classList.add("is-primary","box")}(c),n.append(c);else{c.classList="do-detail",fe(c);for(let t=0;t<n.children.length;t+=1)t>=4&&(fe(n.children[t]),n.removeChild(n.childNodes[t]),localStorage.setItem("actual-project",JSON.stringify(me(e))))}})),u.append(n)}));const h=document.createElement("div");h.classList.add("is-flex","is-justify-content-space-between"),h.append(m,r,i),t.append(u,h)},Le=e=>{fe(document.getElementById("main-div")),xe(e)},Ce=e=>{const t=document.createElement("div");if([...document.getElementsByClassName("input-form")].some((e=>""===e.value))){const e=document.createElement("div");e.classList.add("modal","is-active");const t=document.createElement("div");t.classList.add("modal-background");const n=document.createElement("div");n.classList.add("modal-content");const a=document.createElement("p");a.classList.add("center","box"),a.textContent="Please, fill in every input of the form.",a.style.zIndex="9";const i=document.createElement("button");i.classList.add("modal-close","is-large"),i.setAttribute("aria-label","close"),i.style.zIndex="9",i.addEventListener("click",(()=>{e.remove()}));const r=document.getElementById("main");n.append(a),e.append(t,i,n),r.append(e)}else if((e=>{if(null!=e){const t=me(e,!0),n=JSON.parse(localStorage.getItem("Projects")),a=document.getElementById("to-do-holder");let i=[],r=[],o=[],c=!1;for(let e=0;e<a.children.length;e+=1){const d=a.children[e].children;for(let e=0;e<d.length;e+=1){const t=d[e];if("LABEL"===t.tagName)i.push(t.children[0].value);else if("DIV"===t.tagName)if(t.classList.contains("radio-holder")){const e=t.children[1].children;for(let t=0;t<e.length;t+=1){const n=e[t].children[0];n.checked&&(i.push(n.value),c=!0)}c||i.push("medium"),c=!1}else if(t.children[0]&&!t.children[0].classList.contains("button")){const e=t.children;for(let t=0;t<e.length;t+=1)r=e[t].children[0].children[0].value,o.push(le(s(),r))}}n[t].toDo.push(ce(s(),...i,o)),i=[],o=[]}localStorage.setItem("Projects",JSON.stringify(n))}else{const e=document.getElementById("pTitle").value,t=document.getElementById("pDescription").value,n=document.getElementById("to-do-holder");let a=[],i=[],r=[];const o=[];let c=!1;for(let e=0;e<n.children.length;e+=1){const t=n.children[e].children;for(let e=0;e<t.length;e+=1){const n=t[e];if("LABEL"===n.tagName)a.push(n.children[0].value);else if("DIV"===n.tagName)if(n.classList.contains("radio-holder")){const e=n.children[1].children;for(let t=0;t<e.length;t+=1){const n=e[t].children[0];n.checked&&(a.push(n.value),c=!0)}c||a.push("medium"),c=!1}else{const e=n.children;for(let t=0;t<e.length;t+=1)i=e[t].children[0].children[0].value,r.push(le(s(),i))}}o.push(ce(s(),...a,r)),a=[],r=[]}const d=JSON.parse(localStorage.getItem("Projects")),l=de(s(),e,t,o);d.push(l),(e=>{const t=document.getElementById("project-navigation"),n=document.getElementById("project-nav-list"),a=document.createElement("a");a.textContent=e.title;const i=document.createElement("li");i.id=e.id,i.addEventListener("click",(()=>{Le(me(e))})),i.appendChild(a),n.appendChild(i),t.appendChild(n)})(l),localStorage.setItem("Projects",JSON.stringify(d))}})(e),t.remove(),e){const t=document.getElementById("main-div");fe(t),xe(me(e))}else Ee()},Te=()=>{const e=document.getElementById("main-div");fe(e);const t=document.createElement("div"),n=document.createElement("input"),a=document.createElement("div");a.classList.toggle("formProject"),e.classList.add("is-flex","is-flex-direction-column","column","is-9"),t.id="main-form";const i=document.createElement("div");i.style.position="relative",i.id="to-do-holder",i.classList.add("my-2"),n.type="submit",n.value="Create new Project",n.classList.add("button","is-success","is-align-self-center");const r=document.createElement("div"),o=document.createElement("input");o.classList.add("input","input-form"),o.placeholder="Add a title for your new project.";const s=document.createElement("label");s.classList.add("label"),o.setAttribute("type","text"),o.id="pTitle",s.textContent="Title",s.appendChild(o);const c=document.createElement("textarea");c.placeholder="Add a description of your new project.",c.rows="5",c.classList.add("textarea","input-form");const d=document.createElement("label");d.classList.add("label"),c.setAttribute("type","text"),c.id="pDescription",d.textContent="Description",d.appendChild(c);const l=document.createElement("h2");l.textContent="Project Info";const u=document.createElement("input");u.type="submit",u.value="Add New ToDo",u.classList.add("button","is-link","is-light","is-outlined","my-4"),u.addEventListener("click",(()=>{be(!1)})),a.append(l),r.append(l,s,d,i),t.append(r);const m=document.createElement("div");m.append(u,n),m.classList.add("is-flex","is-justify-content-space-between"),e.append(t,m),n.addEventListener("click",(()=>{Ce()}))};window.onload=()=>{let e=de(s(),"default","All project are show here",[ce(s(),"First Todo","First Todo Description","21-12-2020","high","First ToDo Note",[le(s(),"first checklist",!1),le(s(),"second checklist",!0)]),ce(s(),"Second Todo","Second Todo Description","21-12-2020","high","First ToDo Note")]);const t=JSON.parse(localStorage.getItem("Projects"))||[];e=t?t[0]=e:[e],localStorage.setItem("Projects",JSON.stringify(t)),(()=>{const e=document.getElementById("navbar"),t=document.getElementById("content"),n=document.getElementById("main"),a=document.createElement("div"),i=document.createElement("div"),r=document.createElement("input");n.append(e),e.append(r),e.classList.add("navbar","is-fixed-top"),r.id="form-button",r.type="submit",r.value="New Project",r.classList.add("button","is-primary","is-fullwidth"),r.addEventListener("click",Te),a.setAttribute("id","sidebar"),a.classList.add("column","is-2"),i.setAttribute("id","main-div"),t.append(a),t.append(i),a.appendChild((()=>{const e=document.createElement("nav");e.id="project-navigation";const t=document.createElement("ul");t.id="project-nav-list",t.classList.add("column");const n=JSON.parse(localStorage.getItem("Projects"));let a=[];const i=document.createElement("li");i.id="project-index";const r=document.createElement("a");r.id="index",r.textContent="Project Index",r.addEventListener("click",Ee),i.append(r),t.append(i);for(let e=0;e<n.length;e+=1){const i=document.createElement("a");a=document.createElement("li"),a.id=n[e].id,i.textContent=n[e].title,i.addEventListener("click",(()=>{Le(me(n[e]))})),a.appendChild(i),t.append(a)}return e.appendChild(t),e})());const o=JSON.parse(localStorage.getItem("Projects"))[0];xe(o)})()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,