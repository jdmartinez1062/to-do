(()=>{"use strict";var t,e=new Uint8Array(16);function n(){if(!t&&!(t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return t(e)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,r=function(t){return"string"==typeof t&&a.test(t)};for(var i=[],o=0;o<256;++o)i.push((o+256).toString(16).substr(1));const s=function(t,e,a){var o=(t=t||{}).random||(t.rng||n)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){a=a||0;for(var s=0;s<16;++s)e[a+s]=o[s];return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=(i[t[e+0]]+i[t[e+1]]+i[t[e+2]]+i[t[e+3]]+"-"+i[t[e+4]]+i[t[e+5]]+"-"+i[t[e+6]]+i[t[e+7]]+"-"+i[t[e+8]]+i[t[e+9]]+"-"+i[t[e+10]]+i[t[e+11]]+i[t[e+12]]+i[t[e+13]]+i[t[e+14]]+i[t[e+15]]).toLowerCase();if(!r(n))throw TypeError("Stringified UUID is invalid");return n}(o)};function c(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function d(t){c(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function l(t){c(1,arguments);var e=d(t);return!isNaN(e)}var u={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function m(t){return function(e){var n=e||{},a=n.width?String(n.width):t.defaultWidth;return t.formats[a]||t.formats[t.defaultWidth]}}var h,f={date:m({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:m({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:m({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},g={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function p(t){return function(e,n){var a,r=n||{};if("formatting"===(r.context?String(r.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=r.width?String(r.width):i;a=t.formattingValues[o]||t.formattingValues[i]}else{var s=t.defaultWidth,c=r.width?String(r.width):t.defaultWidth;a=t.values[c]||t.values[s]}return a[t.argumentCallback?t.argumentCallback(e):e]}}function v(t){return function(e,n){var a=String(e),r=n||{},i=r.width,o=i&&t.matchPatterns[i]||t.matchPatterns[t.defaultMatchWidth],s=a.match(o);if(!s)return null;var c,d=s[0],l=i&&t.parsePatterns[i]||t.parsePatterns[t.defaultParseWidth];return c="[object Array]"===Object.prototype.toString.call(l)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(d))return n}(l):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(d))return n}(l),c=t.valueCallback?t.valueCallback(c):c,{value:c=r.valueCallback?r.valueCallback(c):c,rest:a.slice(d.length)}}}const b={code:"en-US",formatDistance:function(t,e,n){var a;return n=n||{},a="string"==typeof u[t]?u[t]:1===e?u[t].one:u[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+a:a+" ago":a},formatLong:f,formatRelative:function(t,e,n,a){return g[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:p({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:p({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:p({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:p({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:p({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(h={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t,e){var n=String(t),a=e||{},r=n.match(h.matchPattern);if(!r)return null;var i=r[0],o=n.match(h.parsePattern);if(!o)return null;var s=h.valueCallback?h.valueCallback(o[0]):o[0];return{value:s=a.valueCallback?a.valueCallback(s):s,rest:n.slice(i.length)}}),era:v({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:v({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:v({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:v({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:v({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function w(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function y(t,e){c(2,arguments);var n=d(t).getTime(),a=w(e);return new Date(n+a)}function E(t,e){c(2,arguments);var n=w(e);return y(t,-n)}function C(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const x=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return C("yy"===e?a%100:a,e.length)},T=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):C(n+1,2)},L=function(t,e){return C(t.getUTCDate(),e.length)},D=function(t,e){return C(t.getUTCHours()%12||12,e.length)},k=function(t,e){return C(t.getUTCHours(),e.length)},M=function(t,e){return C(t.getUTCMinutes(),e.length)},S=function(t,e){return C(t.getUTCSeconds(),e.length)},P=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return C(Math.floor(a*Math.pow(10,n-3)),e.length)};var j=864e5;function U(t){c(1,arguments);var e=1,n=d(t),a=n.getUTCDay(),r=(a<e?7:0)+a-e;return n.setUTCDate(n.getUTCDate()-r),n.setUTCHours(0,0,0,0),n}function N(t){c(1,arguments);var e=d(t),n=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var r=U(a),i=new Date(0);i.setUTCFullYear(n,0,4),i.setUTCHours(0,0,0,0);var o=U(i);return e.getTime()>=r.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}function O(t){c(1,arguments);var e=N(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var a=U(n);return a}var W=6048e5;function A(t,e){c(1,arguments);var n=e||{},a=n.locale,r=a&&a.options&&a.options.weekStartsOn,i=null==r?0:w(r),o=null==n.weekStartsOn?i:w(n.weekStartsOn);if(!(o>=0&&o<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var s=d(t),l=s.getUTCDay(),u=(l<o?7:0)+l-o;return s.setUTCDate(s.getUTCDate()-u),s.setUTCHours(0,0,0,0),s}function I(t,e){c(1,arguments);var n=d(t,e),a=n.getUTCFullYear(),r=e||{},i=r.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:w(o),l=null==r.firstWeekContainsDate?s:w(r.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(a+1,0,l),u.setUTCHours(0,0,0,0);var m=A(u,e),h=new Date(0);h.setUTCFullYear(a,0,l),h.setUTCHours(0,0,0,0);var f=A(h,e);return n.getTime()>=m.getTime()?a+1:n.getTime()>=f.getTime()?a:a-1}function Y(t,e){c(1,arguments);var n=e||{},a=n.locale,r=a&&a.options&&a.options.firstWeekContainsDate,i=null==r?1:w(r),o=null==n.firstWeekContainsDate?i:w(n.firstWeekContainsDate),s=I(t,e),d=new Date(0);d.setUTCFullYear(s,0,o),d.setUTCHours(0,0,0,0);var l=A(d,e);return l}var B=6048e5;function q(t,e){var n=t>0?"-":"+",a=Math.abs(t),r=Math.floor(a/60),i=a%60;if(0===i)return n+String(r);var o=e||"";return n+String(r)+o+C(i,2)}function z(t,e){return t%60==0?(t>0?"-":"+")+C(Math.abs(t)/60,2):F(t,e)}function F(t,e){var n=e||"",a=t>0?"-":"+",r=Math.abs(t);return a+C(Math.floor(r/60),2)+n+C(r%60,2)}const H={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});case"GGGG":default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),r=a>0?a:1-a;return n.ordinalNumber(r,{unit:"year"})}return x(t,e)},Y:function(t,e,n,a){var r=I(t,a),i=r>0?r:1-r;return"YY"===e?C(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):C(i,e.length)},R:function(t,e){return C(N(t),e.length)},u:function(t,e){return C(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return C(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return C(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return T(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return C(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){var r=function(t,e){c(1,arguments);var n=d(t),a=A(n,e).getTime()-Y(n,e).getTime();return Math.round(a/B)+1}(t,a);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):C(r,e.length)},I:function(t,e,n){var a=function(t){c(1,arguments);var e=d(t),n=U(e).getTime()-O(e).getTime();return Math.round(n/W)+1}(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):C(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):L(t,e)},D:function(t,e,n){var a=function(t){c(1,arguments);var e=d(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=e.getTime(),r=n-a;return Math.floor(r/j)+1}(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):C(a,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});case"EEEE":default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return C(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});case"eeee":default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var r=t.getUTCDay(),i=(r-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return C(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});case"cccc":default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),r=0===a?7:a;switch(e){case"i":return String(r);case"ii":return C(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});case"iiii":default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,r=t.getUTCHours();switch(a=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",e){case"b":case"bb":case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,r=t.getUTCHours();switch(a=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return D(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):k(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):C(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):C(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):M(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):S(t,e)},S:function(t,e){return P(t,e)},X:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return z(r);case"XXXX":case"XX":return F(r);case"XXXXX":case"XXX":default:return F(r,":")}},x:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return z(r);case"xxxx":case"xx":return F(r);case"xxxxx":case"xxx":default:return F(r,":")}},O:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+q(r,":");case"OOOO":default:return"GMT"+F(r,":")}},z:function(t,e,n,a){var r=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+q(r,":");case"zzzz":default:return"GMT"+F(r,":")}},t:function(t,e,n,a){var r=a._originalDate||t;return C(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,a){return C((a._originalDate||t).getTime(),e.length)}};function J(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function X(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const Q={p:X,P:function(t,e){var n,a=t.match(/(P+)(p+)?/),r=a[1],i=a[2];if(!i)return J(t,e);switch(r){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;case"PPPP":default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",J(r,e)).replace("{{time}}",X(i,e))}};var G=6e4;function R(t){return t.getTime()%G}function $(t){var e=new Date(t.getTime()),n=Math.ceil(e.getTimezoneOffset());e.setSeconds(0,0);var a=n>0?(G+R(e))%G:R(e);return n*G+a}var V=["D","DD"],_=["YY","YYYY"];function K(t){return-1!==V.indexOf(t)}function Z(t){return-1!==_.indexOf(t)}function tt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var et=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,nt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,at=/^'([^]*?)'?$/,rt=/''/g,it=/[a-zA-Z]/;function ot(t,e,n){c(2,arguments);var a=String(e),r=n||{},i=r.locale||b,o=i.options&&i.options.firstWeekContainsDate,s=null==o?1:w(o),u=null==r.firstWeekContainsDate?s:w(r.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var m=i.options&&i.options.weekStartsOn,h=null==m?0:w(m),f=null==r.weekStartsOn?h:w(r.weekStartsOn);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!i.localize)throw new RangeError("locale must contain localize property");if(!i.formatLong)throw new RangeError("locale must contain formatLong property");var g=d(t);if(!l(g))throw new RangeError("Invalid time value");var p=$(g),v=E(g,p),y={firstWeekContainsDate:u,weekStartsOn:f,locale:i,_originalDate:g},C=a.match(nt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,Q[e])(t,i.formatLong,y):t})).join("").match(et).map((function(n){if("''"===n)return"'";var a=n[0];if("'"===a)return st(n);var o=H[a];if(o)return!r.useAdditionalWeekYearTokens&&Z(n)&&tt(n,e,t),!r.useAdditionalDayOfYearTokens&&K(n)&&tt(n,e,t),o(v,n,i.localize,y);if(a.match(it))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return n})).join("");return C}function st(t){return t.match(at)[1].replace(rt,"'")}const ct=(t,e,n,a,r,i="",o=[])=>({id:t,title:e,description:n,dueDate:a,startDate:ot(new Date,"yyyy-MM-dd"),priority:r,notes:i,checkList:o}),dt=(t,e,n,a=[])=>({id:t,title:e,description:n,toDo:a}),lt=(t,e,n=!1)=>({id:t,title:e,status:n,statusToggle:()=>{(void 0).status?(void 0).status=!1:(void 0).status=!0}}),ut=t=>{const e=JSON.parse(localStorage.getItem("Projects"));for(let n=0;n<e.length;n+=1)e[n].id===t.id&&(e[n]=t);localStorage.setItem("Projects",JSON.stringify(e))},mt=(t,e=!1)=>{const n=JSON.parse(localStorage.getItem("Projects"));for(let a=0;a<n.length;a+=1)if(n[a].id===t.id)return e?a:n[a];return-1},ht=t=>{const e=[];return Object.entries(t).forEach((n=>{const a=n[1],r=n[0];if(t.hasOwnProperty(r))if("checkList"===r){const n=document.createElement("div");n.classList.add("center","is-flex","is-flex-direction-column"),n.append(...((t,e)=>{let n;const a=[];let r,i;const o=JSON.parse(localStorage.getItem("actual-project"));return Object.entries(e).forEach((e=>{const s=e[1];n=document.createElement("div"),r=document.createElement("input"),i=document.createElement("label"),r.checked=s.status,r.setAttribute("type","checkbox"),r.setAttribute("id",s.id),r.classList.add("mx-3"),r.dataset.checklist=s.id,r.dataset.toDo=t.id,i.textContent=s.title,i.append(r),n.append(i),r.addEventListener("click",(t=>{t=t.target;for(let e=0;e<o.toDo.length;e+=1)if(o.toDo[e].id===t.dataset.toDo){const n=o.toDo[e];for(let e=0;e<n.checkList.length;e+=1)if(n.checkList[e].id===t.id){let t=n.checkList[e];t=n.checkList[e],t.status=!t.status,ut(o)}}})),a.push(n)})),a})(t,a)),e.push(n)}else if("dueDate"===r){const n=document.createElement("span"),a=(new Date(t.startDate).getTime()-new Date(t.dueDate).getTime())/864e5;a<0?(n.innerText=`You have ${Math.abs(a)} days to finish this project!`,n.style.position="absolute",n.style.top="10px",n.style.right="10px"):(n.innerText="This project was supposed to be already done!",n.style.position="absolute",n.style.top="10px",n.style.right="10px"),e.push(n)}else if("title"!==r&&"id"!==r&&"description"!==r&&"startDate"!==r){const t=document.createElement("p");t.className+=`${(t=>t.split("s+(?=[A-Z])").join("-").toLowerCase())(r)}`,t.textContent=a,e.push(t)}})),e},ft=t=>{document.getElementById(t.id).remove()},gt=t=>{for(;t.lastChild;)t.removeChild(t.lastChild)},pt=(t,e,n=!1)=>{t=mt(t);for(let a=0;a<t.toDo.length;a+=1)if(t.toDo[a].id===e.id)return n?a:t.toDo[a];return-1},vt=t=>{const e=document.createElement("div");e.id="to-do-form",e.classList="modal";const n=document.createElement("div");n.classList="modal-content";const a=document.createElement("h2");a.textContent="Edit Field",a.classList="label";const r=document.createElement("input");r.type="text",r.value=t.textContent,r.classList="input";const i=document.createElement("input");i.type="submit",i.classList="button is-success";const o=document.getElementById("main-div");e.classList="edit-form",n.append(a,r);const s=document.createElement("div");s.classList="modal-background",e.append(s,n,i),o.append(e),i.addEventListener("click",(()=>{document.getElementById(t.id).textContent=r.value,ft(e);const n={id:t.dataset.project},a={id:t.dataset.id},i=mt(n),o=pt(i,a);console.log(o),"title"===t.dataset.object?o.title=r.value:"description"===t.dataset.object&&(o.description=r.value);const s=pt(i,o,!0);i.toDo[s]=o,ut(i)}))},bt=t=>{const e=document.getElementById("main-div");e.classList.add("column");const n=document.createElement("h2"),a=document.createElement("p"),r=document.createElement("input");r.type="submit",r.classList="button is-danger",r.value="Delete this project",r.addEventListener("click",(()=>{(t=>{document.getElementById(t.id).remove()})(mt(t));const n=mt(t,!0),a=JSON.parse(localStorage.getItem("Projects"));a.splice(n,1),localStorage.setItem("Projects",JSON.stringify(a)),gt(e);const r=document.createElement("h1");r.textContent="Select a project from project index or the nav",r.classList.add("notification"),e.append(r)}));let i=[];localStorage.setItem("actual-project",JSON.stringify(t)),n.textContent=`Project title: ${t.title}`,a.textContent=`Description: ${t.description}`;const o=document.createElement("div"),c=document.createElement("h4");c.textContent="Checklists",o.appendChild(c),o.classList.add("do-detail");const d=document.createElement("h3");d.textContent="To Do list";const l=document.createElement("div");e.append(n,a),l.append(d),t.toDo.forEach((e=>{const n=document.createElement("div");n.classList.add("notification","box","mr-2","is-warning","mt-2"),n.style.position="relative",n.setAttribute("id",e.id);const a=document.createElement("input");a.dataset.id=e.id,a.style.float="right",a.style.zIndex="2",a.value="Delete ToDo",a.classList.add("button","is-danger","mr-2"),a.addEventListener("click",(n=>{const a=n=n.target;a.id=n.dataset.id;const r=pt(t,a,!0);t.toDo.splice(r,1),ut(t),ft(document.getElementById(e.id))}));const r=document.createElement("p"),c=document.createElement("p");c.style.fontWeight=600,c.textContent=e.title,r.textContent=e.description,c.dataset.object="title",c.dataset.project=t.id,c.dataset.id=e.id,c.id=s(),r.dataset.id=e.id,r.dataset.project=t.id,r.dataset.object="description",r.id=s(),c.addEventListener("dblclick",(t=>{t=t.target,vt(t)})),r.addEventListener("dblclick",(t=>{t=t.target,vt(t)}));const d=document.createElement("i");d.classList="arrow",c.style.display="inline",n.appendChild(a),n.append(c,d),n.appendChild(r),d.addEventListener("click",(()=>{if(d.classList.toggle("up"),e=pt(t,e),i=ht(e),n.children.length<5&&o.children.length<3)o.append(...i),o.classList.add("notification"),function(t){for(let e=0;e<t.children.length;e+=1)if(t.children[e].classList.contains("priority")){const n=t.children[e].innerText;t.children[e].innerText=`Priority: ${n}`}else t.children[e].classList.contains("notes")&&t.children[e].classList.add("center")}(o),function(t){t.innerText.includes("high")?t.classList.add("is-danger","box"):t.innerText.includes("medium")?t.classList.add("is-warning","box"):t.classList.add("is-primary","box")}(o),n.append(o);else{o.classList="do-detail",gt(o);for(let e=0;e<n.children.length;e+=1)e>=4&&(gt(n.children[e]),n.removeChild(n.childNodes[e]),localStorage.setItem("actual-project",JSON.stringify(mt(t))))}})),l.append(n)})),e.append(r,l)},wt=()=>{const t=document.createElement("div");t.id="index-holder";const e=JSON.parse(localStorage.getItem("Projects")),n=document.getElementById("main-div");for(let a=0;a<e.length;a+=1){const r=document.createElement("a");r.classList.add("box","m-5","p-5","notification","is-info"),r.id=e[a].id,r.textContent=e[a].title,r.addEventListener("click",(()=>{gt(n),bt(e[a])})),t.append(r)}gt(n),n.append(t)},yt=t=>{gt(document.getElementById("main-div")),bt(t)},Et=()=>{const t=document.getElementById("to-do-holder");t.classList.add("box"),t.style.backgroundColor="skyblue";const e=document.createElement("div");e.id=s(),e.classList.add("box"),e.style.position="relative";const n=s(),a=document.createElement("input");a.placeholder="Add a title for something you need ToDo in this project.",a.classList.add("input","is-small","is-info");const r=document.createElement("label");r.classList.add("label","is-small"),a.setAttribute("type","text"),r.textContent="ToDo Title",r.appendChild(a);const i=document.createElement("textarea");i.placeholder="Add the description of this ToDo.",i.classList.add("textarea","is-small","is-info"),i.rows="5";const o=document.createElement("label");o.classList.add("label","is-small"),i.setAttribute("type","text"),o.textContent="ToDo Description",o.appendChild(i);const c=document.createElement("input");c.classList.add("mx-2","is-small");const d=document.createElement("label");d.classList.add("is-small","is-info","label"),c.setAttribute("type","date"),d.textContent="ToDo Due Date",d.appendChild(c);const l=document.createElement("input");l.classList.add("ml-1");const u=document.createElement("label");u.classList.add("is-small","label"),l.setAttribute("type","radio"),l.setAttribute("value","high"),l.setAttribute("name",`${n}`),u.textContent="High",u.appendChild(l);const m=document.createElement("input");m.classList.add("ml-1");const h=document.createElement("label");h.classList.add("is-small","label"),m.setAttribute("type","radio"),m.setAttribute("value","medium"),m.setAttribute("name",`${n}`),h.textContent="Medium",h.appendChild(m);const f=document.createElement("input");f.classList.add("ml-1");const g=document.createElement("label");g.classList.add("is-small","label"),f.setAttribute("type","radio"),f.setAttribute("value","low"),f.setAttribute("name",`${n}`),g.textContent="Low",g.appendChild(f);const p=document.createElement("div");p.classList.toggle("radio-holder"),p.classList.add("py-2");const v=document.createElement("p");v.classList.add("is-small","label"),v.textContent="Pick your ToDo level of priority";const b=document.createElement("div");b.append(u,h,g),p.append(v,b);const w=document.createElement("textarea");w.placeholder="Here you can add some notes for the ToDo.",w.classList.add("textarea","is-small","is-info"),w.row="5";const y=document.createElement("label");y.textContent="Notes",y.classList.add("label","is-small","is-info"),y.append(w);const E=document.createElement("div"),C=document.createElement("input");C.classList.add("is-link","button"),C.type="submit",C.value="Add Check-ToDo (List of things you need to accomplish to finish the ToDo).",C.addEventListener("click",(()=>{(t=>{const e=document.createElement("input");e.placeholder="Title for the Check-ToDo.",e.classList.add("input","is-small","is-primary");const n=document.createElement("label");n.classList.add("label","is-small","is-primary","my-4");const a=document.createElement("div");a.classList.add("is-flex","center");const r=document.createElement("span"),i=s();a.id=i,r.style.cursor="pointer",r.classList.add("delete","mt-4","ml-3"),r.classList.toggle="close",r.innerHTML="&times;",e.setAttribute("type","text"),n.textContent="Add a CheckList",n.append(e),a.append(n,r),t.append(a),r.addEventListener("click",(()=>{document.getElementById(a.id).remove()}))})(E)}));const x=document.createElement("span");x.style.position="absolute",x.style.top="10px",x.style.right="10px",x.classList.add("delete"),x.style.cursor="pointer",x.classList.toggle="close",x.innerHTML="&times;",e.append(r,o,d,p,y,x,C,E),t.append(e),x.addEventListener("click",(()=>{ft(t)}))},Ct=()=>{const t=document.getElementById("main-div");gt(t);const e=document.createElement("div"),n=document.createElement("input"),a=document.createElement("div");a.classList.toggle("formProject"),t.classList.add("is-flex","is-flex-direction-column","column","is-9");const r=document.createElement("div");r.style.position="relative",r.id="to-do-holder",e.id="main-form",n.type="submit",n.value="Create new Project",n.classList.add("button","is-success","is-align-self-center");const i=document.createElement("div"),o=document.createElement("input");o.classList.add("input"),o.placeholder="Add a title for your new project.";const c=document.createElement("label");c.classList.add("label"),o.setAttribute("type","text"),o.id="pTitle",c.textContent="Title",c.appendChild(o);const d=document.createElement("textarea");d.placeholder="Add a description of your new project.",d.rows="5",d.classList.add("textarea");const l=document.createElement("label");l.classList.add("label"),d.setAttribute("type","text"),d.id="pDescription",l.textContent="Description",l.appendChild(d);const u=document.createElement("h2");u.textContent="Project Info";const m=document.createElement("input");m.type="submit",m.value="Add New ToDo",m.classList.add("button","is-link","is-light","is-outlined","my-4"),m.addEventListener("click",Et),a.append(u),i.append(u,c,l,r),e.append(i,m),t.append(e,n),n.addEventListener("click",(()=>{(()=>{const t=document.getElementById("pTitle").value,e=document.getElementById("pDescription").value,n=document.getElementById("to-do-holder");let a=[],r=[],i=[];const o=[];let c=!1;for(let t=0;t<n.children.length;t+=1){const e=n.children[t].children;for(let t=0;t<e.length;t+=1){const n=e[t];if("LABEL"===n.tagName)a.push(n.children[0].value);else if("DIV"===n.tagName)if(n.classList.contains("radio-holder")){const t=n.children[1].children;for(let e=0;e<t.length;e+=1){const n=t[e].children[0];n.checked&&(a.push(n.value),c=!0)}c||a.push("medium"),c=!1}else{const t=n.children;for(let e=0;e<t.length;e+=1)r=t[e].children[0].children[0].value,i.push(lt(s(),r))}}o.push(ct(s(),...a,i)),a=[],i=[]}const d=JSON.parse(localStorage.getItem("Projects")),l=dt(s(),t,e,o);d.push(l),(t=>{const e=document.getElementById("project-navigation"),n=document.getElementById("project-nav-list"),a=document.createElement("a");a.textContent=t.title;const r=document.createElement("li");r.id=t.id,r.addEventListener("click",(()=>{yt(mt(t))})),r.appendChild(a),n.appendChild(r),e.appendChild(n)})(l),localStorage.setItem("Projects",JSON.stringify(d))})(),ft(e)}))};window.onload=()=>{let t=dt(s(),"default","All project are show here",[ct(s(),"First Todo","First Todo Description","21-12-2020","high","First ToDo Note",[lt(s(),"first checklist",!1),lt(s(),"second checklist",!0)]),ct(s(),"Second Todo","Second Todo Description","21-12-2020","high","First ToDo Note",!1)]);const e=JSON.parse(localStorage.getItem("Projects"))||[];t=e?e[0]=t:[t],localStorage.setItem("Projects",JSON.stringify(e)),(()=>{const t=document.getElementById("navbar"),e=document.getElementById("content"),n=document.getElementById("main"),a=document.createElement("div"),r=document.createElement("div"),i=document.createElement("input");n.append(t),t.append(i),t.classList.add("navbar","is-fixed-top"),i.id="form-button",i.type="submit",i.value="New Project",i.classList.add("button","is-primary","is-fullwidth"),i.addEventListener("click",Ct),a.setAttribute("id","sidebar"),a.classList.add("column","is-2"),r.setAttribute("id","main-div"),e.append(a),e.append(r),a.appendChild((()=>{const t=document.createElement("nav");t.id="project-navigation";const e=document.createElement("ul");e.id="project-nav-list",e.classList.add("column");const n=JSON.parse(localStorage.getItem("Projects"));let a=[];const r=document.createElement("li");r.id="project-index";const i=document.createElement("a");i.id="index",i.textContent="Project Index",i.addEventListener("click",wt),r.append(i),e.append(r);for(let t=0;t<n.length;t+=1){const r=document.createElement("a");a=document.createElement("li"),a.id=n[t].id,r.textContent=n[t].title,r.addEventListener("click",(()=>{yt(mt(n[t]))})),a.appendChild(r),e.append(a)}return t.appendChild(e),t})());const o=JSON.parse(localStorage.getItem("Projects"))[0];bt(o)})()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,